matching
graph
bipartite
turbo
END_OF_TAGS
bool find(int j, vector<vector<int>>& g, vector<int>& btoa, vector<int>& vis) {
	if (btoa[j] == -1) return 1;
	vis[j] = 1; int di = btoa[j];
	for (int e : g[di])
		if (!vis[e] && find(e, g, btoa, vis)) {
			btoa[e] = di;
			return 1;
		}
	return 0;
}

int dfsMatching(vector<vector<int>>& g, vector<int>& btoa) {//left part neighbours, reference to anwser for right
	vector<int> vis;
	for(int i=0;i<g.size();i++ ){
		vis.assign(btoa.size(), 0);
		for (int j : g[i])
			if (find(j, g, btoa, vis)) {
				btoa[j] = i;
				break;
			}
	}
	return btoa.size() - (int)count(btoa.begin(),btoa.end(), -1);
}
